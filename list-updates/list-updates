#!/bin/bash
# A simple bash script that can print out the number or list of updates
# available. Output is intentionally lacking any formatting for maximum portability.
# Author: William Bradley
# Date: Last modification: 8/20/2017
# Licence: WTFPL, use however you wish.
UPDATE_COUNT="false"
UPDATE_LIST="false"
HELP="false"
NUMBER=20
# Get the list of updates
readarray -t updates <<< "$(apt list --upgradable 2>/dev/null)"

# Get the number of updates
numupdates=$((${#updates[*]}-1))

# Help function
function print_help() {
	echo "-c|--count will print the number of updates to stdout."
	echo "-l|--list will print the list of updates to stdout."
	echo "-n|--number the number of lines in the list of updates to ouput."
	echo "defaults to 20."
	echo "-h|--help is this help."
	echo 
	echo "This command expects one or more arguments. If none are supplied,"
	echo "then the program will return this help"
}

#print the number of updates available
function print_updateCount() {
	echo $numupdates "updates available."
}

#print out the update list. This list intentionally limits output to 20 lines.
function print_updateList() {
	if [[ $numupdates = "0" ]]; then
		echo "No packages to update at this time."
	else 
		printf -- "%s\n" "${updates[@]:1:$NUMBER}"
	fi
}
# Arg parser
OPTS=`getopt -o clhn:: -l count,list,help,number::  -n 'list-updates' -- "$@"`
if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

while true; do
	case "$1" in 
		-c|--count ) UPDATE_COUNT="true"; shift ;;
		-l|--list ) UPDATE_LIST="true"; shift ;;
		-h|--help ) HELP="true"; shift ;;
		-n|--number ) NUMBER=$2 ; shift 2 ;;
		--) shift; break ;;
		* ) break ;;
	esac
done

if [ "$UPDATE_COUNT" = "true" ]; then
	print_updateCount
fi
if [ "$UPDATE_LIST" = "true" ]; then
	print_updateList
fi
if [ "$HELP" = "true" ]; then
	print_help
fi
exit 0;
