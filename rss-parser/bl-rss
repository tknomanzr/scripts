#! /usr/bin/python
# An rss and atom feedparser for BunsenLabs
# Hopefully ideal for running in a conky
# Author: William Bradley
# BunsenLabs Forum Handle: tknomanzr
# License: wtfpl. Use this script however you see fit.
# This is an exercise in learning python for me.
# This script can also be found at: https://github.com/tknomanzr/bunsen_labs
# TODO: build this into a proper command-line tool and allow the user to
# set options for colors, number of posts, hr thickness and the feed
# url to parse from the command line.
import sys;
reload(sys);
sys.setdefaultencoding("utf8")
import feedparser
import re
bunsen_labs_url = "https://forums.bunsenlabs.org/extern.php?action=feed&type=atom"
posts = []
color_1 = "${color 0047ab}"
color_2 = "${color FF4500}"
hr = "${hr 1}"
alignr = "$alignr"
regexp = "&.+?;"
numposts = 9
title_list = []
description_list = []
name_list = []
# Get all the posts published by the feed and load them into
# dictionary object posts
def get_posts():
	feed = feedparser.parse(bunsen_labs_url)
	for i in range(0,numposts):
		posts.append({'title': feed['entries'][i].title,
		'description': feed['entries'][i].summary, 
		'name': feed['entries'][i].author})
	return posts
# Clean a string up, removing html and markdown
# and unescaping html
def clean_html(temp_str):
	for i in range(0,numposts):
		from HTMLParser import HTMLParser
		parser = HTMLParser()
		temp_str = parser.unescape(temp_str)
		# clean html and markdown out of titles
		temp_str = re.sub(r'<[^>]+>', "", temp_str)
	return temp_str
# print the lists
def print_lists(title_list, description_list, name_list):
	print color_1
	for i in range(0,numposts):
		print title_list[i]
		print hr
		# print the description
		print color_2 + description_list[i]
		print alignr + color_1 + name_list[i]
		print color_1 + hr
	return
posts = get_posts()
for i in range(0,numposts):
	# pull a title out of the dictionary, then clean it
	temp_str = posts[i]['title']
	temp_str = clean_html(temp_str)
	# add the title to the list of cleaned titles
	title_list.append(temp_str)
	# pull a description out of the dictionary, then clean it
	temp_str = posts[i]['description']
	temp_str = clean_html(temp_str)
	temp_str = temp_str[:255]
	# add the description to the list of cleaned descriptions
	description_list.append(temp_str)
	temp_str = posts[i]['name']
	temp_str = clean_html(temp_str)
	# add the name to name_list
	name_list.append(temp_str)
# print the output	
print_lists(title_list, description_list, name_list)
exit
	
	
